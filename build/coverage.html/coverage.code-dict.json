{"/home/travis/build/npmtest/node-npmtest-bower-installer/test.js":"/* istanbul instrument in package npmtest_bower_installer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bower-installer/lib.npmtest_bower_installer.js":"/* istanbul instrument in package npmtest_bower_installer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bower_installer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bower_installer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bower-installer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bower-installer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bower_installer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bower_installer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bower_installer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bower_installer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bower_installer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bower_installer.__dirname + '/lib.npmtest_bower_installer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bower-installer/node_modules/bower-installer/bower-installer.js":"#!/usr/bin/env node\n\nvar _ = require('lodash'),\n  async = require('async'),\n  fileLib = require('node-fs'),\n  colors = require('colors'),\n  bower = require('bower'),\n  path = require('path'),\n  utils = require('./lib/utils'),\n  nopt = require('nopt'),\n  fs = require('fs'),\n  installer = require('./lib/installer');\n\nvar basePath = process.cwd(),\n  pathSep = '/',\n  knownOpts = {\n    'remove': Boolean,\n    'help': Boolean,\n    'remove_install_path': Boolean,\n    'silent': Boolean\n  },\n  shortHands = {\n    \"r\": [\"--remove\"],\n    \"h\": [\"--help\"],\n    \"p\": [\"--remove-install-path\"],\n    \"s\": [\"--silent\"]\n  },\n  cfg;\n\nvar options = nopt(knownOpts, shortHands, process.argv, 2);\n\nif (options.help) {\n  console.log((\"---------------------------------------------------------------------\").blue);\n  console.log((\"Bower Installer\").green);\n  console.log((\"---------------------------------------------------------------------\").blue);\n  console.log(\"Tool for installing bower dependencies that won't include entire repos.\");\n  console.log(\"Although Bower works great as a light-weight tool to quickly install \");\n  console.log(\"browser dependencies, it currently does not provide much functionality \");\n  console.log(\"for installing specific \\\"built\\\" components for the client.\");\n  console.log((\"---------------------------------------------------------------------\").blue);\n  console.log((\"Options:\").green);\n  console.log(\"--remove [r] - Remove the bower_components directory after execution.\")\n  console.log(\"--remove-install-path [p] - Remove the install destination paths before installing dependencies.\")\n  console.log(\"--help   [h] - Display this.\");\n  console.log((\"---------------------------------------------------------------------\").blue);\n  return;\n}\n\nfunction tryLoadCfg(cfgJson) {\n  try {\n    var bower = require(path.join(basePath, cfgJson));\n    return bower.install;\n  } catch (e) {\n    throw e;\n  }\n}\n\n// Load configuration file\ntry {\n  cfg = tryLoadCfg('bower.json');\n} catch (e) {\n  console.error(('Error while loading bower.json').red, e);\n  try {\n    cfg = tryLoadCfg('component.json');\n  } catch (e) {\n    throw new Error((\"No valid bower.json or component.json present: \").red + e);\n  }\n}\nvar paths;\nvar installPathFiles;\n\nif (!options.silent) {\n  process.stdout.write('Setting up install paths...');\n}\n\nif (!cfg || !cfg.path) {\n  paths = \"default\";\n  installPathFiles = _.map(paths, basePath);\n} else {\n  paths = _.isString(cfg.path) ? {all: cfg.path} : cfg.path;\n\n  if (cfg.base !== undefined) {\n    _.each(paths, function (path, key) {\n      paths[key] = cfg.base + pathSep + path;\n    });\n\n  } else {\n    installPathFiles = _.map(paths,\n      function (path) {\n        return (basePath + pathSep + path);\n      });\n    _.each(installPathFiles, function (file) {\n\n      // if file path has variables like {name} do not create/delete folder\n      // the folder will be created later in the installer\n      if (!utils.hasVariableInPath(file)) {\n\n        if (options['remove-install-path']) {\n          utils.deleteFolderRecursive(file);\n        }\n\n        if (!fs.existsSync(file)) {\n          fileLib.mkdirSync(file, 0755, true);\n        }\n      }\n    });\n  }\n}\n\nif (!options.silent) {\n  process.stdout.write((\"Finished\\r\\n\").green);\n\n  process.stdout.write('Running bower install...');\n}\n\nbower.commands\n  .install()\n  .on('end', function (installed) {\n    if (!options.silent) {\n      process.stdout.write((\"Finished\\r\\n\").green);\n    }\n\n    bower.commands\n      .list({paths: true})\n      .on('end', function (data) {\n        if (!options.silent) {\n          console.log('Installing: ');\n        }\n\n        // The callback here will cascade downwards\n        // throughout asyncronous calls. This is necessary\n        // to determine when everything has finished.\n        async.each(_.map(data, function (dep, key) {\n          return {\n            dep: dep,\n            key: key\n          }\n        }), function (o, callback) {\n          var dep = o.dep,\n            key = o.key;\n\n          var keypath = basePath + pathSep + bower.config.directory + pathSep + key;\n          var pakcfg = utils.getJSON(keypath, pathSep);\n          if (!pakcfg) {\n            pakcfg = {name: key};\n          }\n          pakcfg.key = key;\n\n          if (cfg && (!cfg.ignore || (cfg.ignore && !_.includes(cfg.ignore, key)))) {\n            if (_.isArray(dep)) {\n              async.each(dep, function (subDep, callback) {\n                installer.installDependency(subDep, pakcfg, cfg, paths, options.silent, callback);\n              }, callback);\n            } else {\n              installer.installDependency(dep, pakcfg, cfg, paths, options.silent, callback);\n            }\n          } else {\n            if (!options.silent) {\n              console.log(('\\tIgnoring: ' + key).yellow);\n            }\n          }\n        }, function (err) {\n          if (err) {\n            if (!options.silent) {\n              console.error(('Error:').red, err);\n            }\n          } else {\n            if (options.remove) {\n              if (!options.silent) {\n                process.stdout.write('Removing bower_components dir...');\n              }\n              installer.removeComponentsDir(function (err) {\n                if (!options.silent) {\n                  if (err) {\n                    process.stdout.write((\"Error\").red, err);\n                  } else {\n                    process.stdout.write((\"Finished\\r\\n\").green);\n                  }\n                }\n              })\n            } else {\n              if (!options.silent) {\n                console.log(('Success').green);\n              }\n            }\n          }\n        });\n\n      })\n      .on('error', function (error) {\n        if (!options.silent) {\n          console.error(error);\n        }\n      });\n\n  })\n  .on('error', function (error) {\n    if (!options.silent) {\n      process.stdout.write((\"Error\\r\\n\").red);\n      console.error(error);\n    }\n  });\n","/home/travis/build/npmtest/node-npmtest-bower-installer/node_modules/bower-installer/lib/installer.js":"var utils = require('./utils'),\n  glob = require('glob'),\n  async = require('async'),\n  fileLib = require(\"node-fs\"),\n  path = require('path'),\n  _ = require('lodash'),\n  fs = require('fs'),\n  mkdirp = require('mkdirp');\n\nvar basePath = process.cwd(),\n  pathSep = '/',\n  pathLib = path;\n\n\nvar defaultInstallOptions = {\n  \"includePackageNameInInstallPath\": true\n};\n\nfunction installFile(f, pakcfg, paths, dep, infixDir, silent, options, callback) {\n\n  var f_s, // The path for the file to be moved\n    f_name, // The full path for the file to be moved\n    path, // The path for the new file location\n    f_name_new, // The new file name, if we are mapping to a new name\n    key = pakcfg.key;\n\n  // If the dependency is an object, it must\n  // be a mapping, so configure things to rename\n  // the file\n  if (_.isObject(f)) {\n    for (var dep_key in f) {\n      f_s = dep_key;\n      f_name_new = f[f_s];\n    }\n  } else {\n    f_s = f;\n  }\n\n  // If the file path doesn't include the current location, add it\n  f_name = f_s.indexOf(basePath) === 0 ? f_s : basePath + pathSep + f_s;\n\n  // add subdirectories if glob are \"**\"\n  var subDir = '';\n\n  if (!f_name_new) {\n    last = dep.match(/([a-z|A-Z]*)\\/\\*\\*/i)\n    if (last && typeof last[1] !== undefined) {\n      f_name_helper = f_name.split(dep.replace('/**', ''));\n      subDir = (f_name_helper[1] != '') ? pathLib.dirname(f_name_helper[1]) : f_name_helper[1];\n    }\n  }\n\n  if (infixDir != '') {\n    subDir = pathSep + infixDir + subDir;\n  }\n\n  // If the configured paths is a map, use the path for the given file extension\n  if (paths.all) {\n\n    path = utils.parsePath(paths.all, pakcfg) + (options.includePackageNameInInstallPath ? pathSep + key : '') + subDir;\n\n  } else {\n    // Determine the path by regular expression...\n    path = utils.getPathByRegExp(f_name, paths)\n      // ...or by file extension.\n      || paths[utils.getExtension(f_name)];\n\n    if (path && typeof path !== 'undefined') {\n\n      if (!utils.hasVariableInPath(path)) {\n        path += (options.includePackageNameInInstallPath ? pathSep + key : '') + subDir;\n      }\n      else {\n        path = utils.parsePath(path, pakcfg) + subDir;\n      }\n\n    } else {\n      path = '';\n    }\n  }\n\n  mkdirp.sync(pathLib.normalize(basePath + pathSep + path), 0755);\n\n  var name = f_name_new ? f_name_new : pathLib.basename(f_name);\n  var f_path = basePath + pathSep + path + (path ? pathSep : '') + utils.parsePath(name, pakcfg);\n\n  // For mapped files, create the directory if it doesn't exist\n  if (f_name_new && !fileLib.existsSync(pathLib.normalize(pathLib.dirname(f_path)))) {\n    fileLib.mkdirSync(pathLib.normalize(pathLib.dirname(f_path)), 0755, true);\n  }\n\n  // If package.json file was parsed\n  if (fs.lstatSync(f_name).isDirectory()) {\n\n    var packagejson = f_name + pathSep + \"package.json\";\n\n    // we want the build to continue as default if case something fails\n    try {\n      // read package.json file\n      var file = fs.readFileSync(packagejson).toString('ascii')\n\n      // parse file\n      var filedata = JSON.parse(file);\n\n      // path to file from main property inside package.json\n      var mainpath = f_name + pathSep + filedata.main;\n\n      // if we have a file reference on package.json to main property and it is a file\n      if (fs.lstatSync(mainpath).isFile()) {\n\n        f_name = mainpath;\n        // Update the output path with the correct file extension\n        if (!paths.all) {\n          path = paths[getExtension(mainpath)];\n        }\n        f_path = basePath + pathSep + path + pathSep + filedata.main;\n      }\n\n    } catch (error) {\n      // We wont need to show log error, if package.json doesnt exist default to download folder\n      // console.log(error);\n    }\n  }\n\n  if (!fs.lstatSync(f_name).isDirectory() && f_name !== f_path) {\n    utils.copyFile(f_name, f_path, function (error) {\n      if (!error) {\n        if (!silent) {\n          console.log(('\\t' + key + ' : ' + f_path).green);\n        }\n      } else {\n        if (!silent) {\n          console.log(('Error\\t' + f + ' : ' + f_path).red);\n          console.log('\\t\\t' + error);\n        }\n      }\n      callback(error);\n    });\n  } else {\n    callback();\n  }\n}\n\nexports.installDependency = function installDependency(deps, pakcfg, cfg, paths, silent, callback) {\n  var base, other;\n\n  var key = pakcfg.key;\n  var options = {};\n  if (cfg.options) {\n    options = cfg.options;\n  } else {\n    Object.keys(defaultInstallOptions).forEach(function (key) {\n      options[key] = defaultInstallOptions[key];\n    });\n  }\n\n  // Look for an overriden source\n  if (cfg.sources && cfg.sources[key]) {\n    // local path, so should work\n    deps = cfg.sources[key];\n  } else {\n    deps = deps.split(',');\n  }\n\n  if (deps.options && typeof deps.options === 'object') {\n    Object.keys(deps.options).forEach(function (key) {\n      if (typeof defaultInstallOptions[key] === 'undefined') {\n        console.warn(\"option \" + key + \" is not a valid install option\");\n      } else {\n        options[key] = deps.options[key];\n      }\n    });\n  }\n\n  // Check for mapping which will map old file names to new ones\n  if (deps.mapping) {\n    deps = deps.mapping;\n  }\n\n  // Ensure we always are dealing with an array\n  if (!_.isArray(deps)) {\n    deps = [deps];\n  }\n\n  // Install each dependency\n  async.each(deps, function (dep, callback) {\n\n    var src, dest;\n\n    // If the file is an object, it is for mapping (renaming) the source\n    // file to a new filename in the destination. Because of this, it\n    // does not make sense to do a file glob, just immediately install\n    // the file\n    if (_.isObject(dep)) {\n\n      // dep is in the form { src : dest }. extrac the key and value.\n      for (var dep_key in dep) {\n        src = dep_key;\n        dest = dep[src];\n      }\n\n      // is the input path a glob?\n      if (/\\*\\*/.test(src)) {\n\n        glob(src, function (err, files) {\n          if (err) {\n            if (!silent) {\n              console.log(('Error globbing \\t' + key + ' : ' + src).red);\n              console.log(('\\t\\t' + err).red);\n            }\n          } else {\n            async.each(files, function (f, callback) {\n              installFile(f, pakcfg, paths, src, dest, silent, options, callback);\n            }, callback);\n          }\n        });\n\n      } else {\n        installFile(dep, pakcfg, paths, dep, '', silent, options, callback);\n      }\n    } else {\n      glob(dep, function (err, files) {\n        if (err) {\n          if (!silent) {\n            console.log(('Error globbing \\t' + key + ' : ' + dep).red);\n            console.log(('\\t\\t' + err).red);\n          }\n        } else {\n          async.each(files, function (f, callback) {\n            installFile(f, pakcfg, paths, dep, '', silent, options, callback);\n          }, callback);\n        }\n      });\n    }\n  }, callback);\n};\n\nexports.removeComponentsDir = function (callback) {\n  utils.deleteFolderRecursive(basePath + pathSep + 'bower_components');\n  callback();\n}\n","/home/travis/build/npmtest/node-npmtest-bower-installer/node_modules/bower-installer/lib/utils.js":"var fs = require('fs'),\n  pathLib = require('path'),\n  _ = require('lodash');\n\nexports.deleteFolderRecursive = function deleteFolderRecursive(path) {\n  var files = [];\n  if (fs.existsSync(path)) {\n    files = fs.readdirSync(path);\n    files.forEach(function (file, index) {\n      var curPath = path + \"/\" + file;\n      if (fs.statSync(curPath).isDirectory()) { // recurse\n        deleteFolderRecursive(curPath);\n      } else { // delete file\n        fs.unlinkSync(curPath);\n      }\n    });\n    fs.rmdirSync(path);\n  }\n};\n\nvar KEYS_MATCH = /\\{[ ]?\\w+[ ]?\\}/g;\nvar KEY_NAME = /\\{[ ]?(\\w+)[ ]?\\}/;\n\nexports.hasVariableInPath = function (path) {\n  return path.indexOf('{') !== -1;\n};\n\nexports.parsePath = function (path, map) {\n  if (path.indexOf('{') !== -1) {\n\n    var keys = path.match(KEYS_MATCH);\n\n    _.each(keys, function (key) {\n      var p = key.match(KEY_NAME);\n      key = p[1];\n\n      var val = key in map ? map[key] : '';\n      path = path.replace(new RegExp('\\\\{[ ]?' + key + '[ ]?\\\\}', 'gi'), val);\n\n    });\n  }\n  return path;\n};\n\nexports.getJSON = function (path, pathSep, filename) {\n  var pakcfg = null;\n\n  // If it is a directory lets try to read from package.json file\n  if (fs.lstatSync(path).isDirectory()) {\n    var pakpath = path + pathSep + (filename ? filename : 'bower') + '.json';\n\n    // we want the build to continue as default if case something fails\n    try {\n      // read package.json file\n      var file = fs.readFileSync(pakpath).toString('ascii')\n\n      // parse file\n      pakcfg = JSON.parse(file);\n\n    } catch (error) {\n    }\n  }\n\n  return pakcfg;\n};\n\n// Loops over the paths map looking for a RegExp formatted key, returning the\n// path for the first match against the provided filename. Returns null if no\n// match is made.\nexports.getPathByRegExp = function getPathByRegExp(filename, paths) {\n  for (var key in paths) {\n    if (!paths.hasOwnProperty(key)) {\n      continue;\n    }\n\n    if (key.indexOf(\"/\") === 0\n      && key.lastIndexOf(\"/\") > 0) {\n      // Assume the key is a RegExp formatted string.\n      var regExp = new RegExp(key.substring(1, key.lastIndexOf(\"/\")));\n      if (filename.match(regExp)) {\n        return paths[key];\n      }\n    }\n  }\n\n  return null;\n};\n\nexports.getExtension = function getExtension(filename) {\n  return pathLib.extname(filename || '').slice(1);\n};\n\n\nexports.copyFile = function copyFile(source, target, cb) {\n  var cbCalled = false;\n\n  var rd = fs.createReadStream(source);\n  rd.on(\"error\", function (err) {\n    done(err);\n  });\n  var wr = fs.createWriteStream(target);\n  wr.on(\"error\", function (err) {\n    done(err);\n  });\n  wr.on(\"close\", function (ex) {\n    done();\n  });\n  rd.pipe(wr);\n\n  function done(err) {\n    if (!cbCalled) {\n      cb(err);\n      cbCalled = true;\n    }\n  }\n};\n"}